{"ast":null,"code":"var _jsxFileName = \"/workspaces/Pi-SkillSwap/pi-skillswap-frontend/src/components/Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const initializePiSDK = async () => {\n    try {\n      // Inizializza l'SDK\n      await Pi.init({\n        version: \"2.0\"\n      });\n      console.log(\"SDK Pi inizializzato con successo\");\n    } catch (error) {\n      console.error(\"Errore nell'inizializzazione dell'SDK Pi:\", error);\n    }\n  };\n  useEffect(() => {\n    initializePiSDK();\n  }, []);\n  const handleLogin = async () => {\n    setLoading(true);\n    try {\n      // Autenticazione con Pi Network\n      const auth = await Pi.authenticate(['payments'], {\n        onIncompletePaymentFound: payment => {\n          console.log('Pagamento incompleto trovato:', payment);\n        }\n      });\n\n      // Ottenimento access token e info utente\n      const {\n        accessToken,\n        user\n      } = auth;\n\n      // Chiamata al backend per login\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`\n        },\n        body: JSON.stringify({\n          userId: user.uid,\n          username: user.username\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        localStorage.setItem('userId', user.uid);\n        localStorage.setItem('accessToken', accessToken);\n        navigate('/dashboard');\n      } else {\n        alert(\"Errore di login: \" + data.error);\n      }\n    } catch (error) {\n      console.error(\"Errore di login:\", error);\n      alert(\"Errore durante l'autenticazione con Pi Network\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Benvenuto su Pi SkillSwap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"pi-button\",\n      onClick: handleLogin,\n      disabled: loading,\n      children: loading ? \"Autenticazione in corso...\" : \"Accedi con Pi Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"Xc10efu7LENssVmhFT1g/4n2EdU=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Login","_s","navigate","loading","setLoading","initializePiSDK","Pi","init","version","console","log","error","handleLogin","auth","authenticate","onIncompletePaymentFound","payment","accessToken","user","response","fetch","method","headers","body","JSON","stringify","userId","uid","username","data","json","success","localStorage","setItem","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/workspaces/Pi-SkillSwap/pi-skillswap-frontend/src/components/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  const initializePiSDK = async () => {\n    try {\n      // Inizializza l'SDK\n      await Pi.init({ version: \"2.0\" });\n      console.log(\"SDK Pi inizializzato con successo\");\n    } catch (error) {\n      console.error(\"Errore nell'inizializzazione dell'SDK Pi:\", error);\n    }\n  };\n\n  useEffect(() => {\n    initializePiSDK();\n  }, []);\n\n  const handleLogin = async () => {\n    setLoading(true);\n    try {\n      // Autenticazione con Pi Network\n      const auth = await Pi.authenticate(['payments'], {\n        onIncompletePaymentFound: (payment) => {\n          console.log('Pagamento incompleto trovato:', payment);\n        }\n      });\n\n      // Ottenimento access token e info utente\n      const { accessToken, user } = auth;\n\n      // Chiamata al backend per login\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`\n        },\n        body: JSON.stringify({ \n          userId: user.uid,\n          username: user.username\n        })\n      });\n\n      const data = await response.json();\n      if (data.success) {\n        localStorage.setItem('userId', user.uid);\n        localStorage.setItem('accessToken', accessToken);\n        navigate('/dashboard');\n      } else {\n        alert(\"Errore di login: \" + data.error);\n      }\n    } catch (error) {\n      console.error(\"Errore di login:\", error);\n      alert(\"Errore durante l'autenticazione con Pi Network\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <h1>Benvenuto su Pi SkillSwap</h1>\n      <button \n        className=\"pi-button\"\n        onClick={handleLogin} \n        disabled={loading}\n      >\n        {loading ? \"Autenticazione in corso...\" : \"Accedi con Pi Network\"}\n      </button>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}